// api/generateTasks.js

// This is a serverless function that runs in a Node.js environment.

export default async function handler(req, res) {
  // We only want to handle POST requests to this endpoint.
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).end('Method Not Allowed');
  }

  try {
    // Get the completed task's context from the request body sent by our React app.
    const { fullTaskContext } = req.body;

    if (!fullTaskContext) {
      return res.status(400).json({ error: 'fullTaskContext is required' });
    }

    // Access the Gemini API key from server-side environment variables.
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

    // --- DEBUGGING STEP ---
    // This will print the key to your terminal where `vercel dev` is running.
    console.log('Server is attempting to use this GEMINI_API_KEY:', GEMINI_API_KEY);
    // --- END DEBUGGING ---

    if (!GEMINI_API_KEY) {
        return res.status(500).json({ error: 'GEMINI_API_KEY is not configured on the server.' });
    }

    // Construct the prompt for Gemini
    const prompt = `You just completed this task: "${fullTaskContext}"

Now generate exactly 2 new follow-up tasks that would naturally result from completing this task. 

Return the tasks in this exact format, and nothing else:
TASK 1:
TITLE: [brief task title]
DESCRIPTION: [detailed description of what needs to be done]

TASK 2:
TITLE: [brief task title] 
DESCRIPTION: [detailed description of what needs to be done]`;

    // Call the Gemini API using the recommended header authentication
    const response = await fetch(
      // Using a modern, fast model. The model name is part of the URL.
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // The API key is now sent as a header, which is more secure.
          'X-goog-api-key': GEMINI_API_KEY,
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 1,
            topP: 1,
            maxOutputTokens: 200,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
      }
    );

    if (!response.ok) {
        const errorText = await response.text();
        console.error("Gemini API Error:", errorText);
        return res.status(response.status).json({ error: `Gemini API failed: ${errorText}` });
    }

    const aiResult = await response.json();
    
    // Extract the generated text from Gemini's response format
    let generatedText = '';
    if (aiResult.candidates && aiResult.candidates[0] && aiResult.candidates[0].content && aiResult.candidates[0].content.parts && aiResult.candidates[0].content.parts[0]) {
      generatedText = aiResult.candidates[0].content.parts[0].text;
    }

    if (!generatedText) {
      return res.status(500).json({ error: 'No text generated by Gemini API' });
    }

    // Send the successful result back to our React app.
    res.status(200).json({ generated_text: generatedText });

  } catch (error) {
    console.error('Error in generateTasks function:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}